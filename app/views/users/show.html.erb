<a class="btn" title="New Event" alt="New Event" href="#new_modal" data-toggle="modal">New Event</a>

<ul data-bind="foreach: entries">
  <li>
    <div>IMAGE</div>
    <div data-bind="text: name()"></div>
    <div>
      <span data-bind="text: eventType()"></span>&nbsp;-&nbsp;
      <span data-bind="text: eventDate()"></span>
    </div>
    <div>
      <span data-bind="text: comment()"></span>
      <div>
        <!-- TODO - enable edit -->
        <span>
          <a data-bind="click: $parent.initEdit" href="#new_modal" data-toggle="modal">Edit</a>
        </span>
        <span>
          <a data-bind="click: $parent.initDelete" href="#delete_modal" data-toggle="modal">Delete</a>
        </span>
      </div>
    </div>
  </li>
</ul>

<div class="modal fade" id="new_modal">
  <div class="modal-header">
    <a class="close" data-dismiss="modal">&times;</a>
    <h3>New Event</h3>
  </div>
  <div class="modal-body">
    <span id="new-error-messages"></span>
    <div>
      <input id="id-entry" type="hidden"/>
      <label for="type-entry">Type:</label>
      <input id="type-entry" type="text" data-provide="typeahead" title="Type" alt="Type"/>
      <label for="name-entry">Name:</label>
      <input id="name-entry" type="text" title="Caption" alt="Caption"/>
      <label for="comments-entry">Comments:</label>
      <textarea id="comments-entry" title="Comments" alt="Comments"></textarea>
      <label for="datepicker-entry">Date:</label>
      <input id="datepicker-entry" class="span2" type="text">
    </div>
  </div>
  <div class="modal-footer">
    <a href="#" id="btn-add-cancel" class="btn" data-dismiss="modal">Cancel</a>
    <a href="#" id="btn-add-entry" class="btn btn-primary" data-bind="click: submitUpdate">Save Changes</a>
  </div>
</div>

<div class="modal fade" id="delete_modal">
  <div class="modal-header">
    <a class="close" data-dismiss="modal">&times;</a>
    <h3>Delete Event</h3>
  </div>
  <div class="modal-body">
    <div>Are you sure you want to delete this event?</div>
    <div>
        <input id="id-delete" type="hidden"/>
        <label for="type-delete">Type:</label>
        <input id="type-delete" type="text" readonly></input>
        <label for="name-delete">Name:</label>
        <input id="name-delete" type="text" readonly></input>
        <label for="comments-delete">Comments:</label>
        <textarea id="comments-delete" readonly></textarea>
        <label for="date-delete">Date:</label>
        <input id="date-delete" type="text" readonly></input>
    </div>
    <div>
        <span id="delete-error-messages"></span>
    </div>
  </div>
  <div class="modal-footer">
    <a href="#" id="btn-delete-cancel" class="btn" data-dismiss="modal">No</a>
    <a href="#" id="btn-delete-entry" class="btn btn-primary" data-bind="click: deleteEntry">Yes</a>
  </div>
</div>

<script type="text/javascript">
  var j$ = jQuery.noConflict();

  var todaysDate = function()
  {
    var today = new Date();
    var dd = today.getDate();
    var mm = today.getMonth() + 1;
    var yyyy = today.getFullYear();

    if (dd < 10) { dd = '0' + dd; }
    if (mm < 10) { mm = '0' + mm; }

    return mm + '/' + dd + '/' + yyyy;
  };

  var buildErrorMessage = function(errorArray)
  {
      var errorString = "<ul>";
      for (var i = 0; i < errorArray.length; i++)
      {
          errorString += "<li>" + errorArray[i] + "</li>";
      }
      errorString += "</ul>";

      return errorString;
  };

  j$(document).ready(function()
  {
      var dateFormat = 'mm/dd/yyyy';

      var j$datepickerEntry = j$('#datepicker-entry');
      var j$newErrorMessages = j$('#new-error-messages');
      var j$deleteErrorMessages = j$('#delete-error-messages');
      var j$btnAddCancel = j$('#btn-add-cancel');
      var j$btnDeleteCancel = j$('#btn-delete-cancel');

      var j$idDelete = j$("#id-delete");
      var j$typeDelete = j$('#type-delete');
      var j$nameDelete = j$('#name-delete');
      var j$commentsDelete = j$("#comments-delete");
      var j$dateDelete = j$("#date-delete");

      var j$idEntry = j$("#id-entry");
      var j$typeEntry = j$('#type-entry');
      var j$nameEntry = j$('#name-entry');
      var j$commentsEntry = j$("#comments-entry");

      j$datepickerEntry.attr('data-date-format', dateFormat);
      j$datepickerEntry.attr('data-date', todaysDate);
      j$datepickerEntry.datepicker(
      {
        format: dateFormat
      });

      j$btnAddCancel.click(function()
      {
        resetForm();
        clearErrors();
      });

      j$btnDeleteCancel.click(function()
      {
        clearErrors();
      });

      var clearErrors = function()
      {
        j$newErrorMessages.html("");
        j$deleteErrorMessages.html("");
      }

      var resetForm = function()
      {
          j$idEntry.val("");
          j$datepickerEntry.val(todaysDate);
          j$typeEntry.val("");
          j$nameEntry.val("");
          j$commentsEntry.val("");
      }

      var sortEvents = function(a, b)
      {
          if (a.eventDate != b.eventDate)
          {
              return a.eventDate > b.eventDate ? -1 : 1;
          }
          else
          {
              return a.created_at > b.created_at ? -1 : 1;
          }
      };

      var FeedEntry = function(data)
      {
        var self = this;

        self.id = data.id;
        self.eventType = ko.observable(data.eventType);
        self.eventDate = ko.observable(data.eventDate);
        self.name = ko.observable(data.name);
        self.comment = ko.observable(data.comment);
        self.created_at = data.created_at;
      }

      var FeedEntryViewModel = function()
      {
        var self = this;
        self.entries = ko.observableArray([]);
        self.entries.sort(sortEvents);

        self.selectedItem = ko.observable();

        //TODO - should eventTypes be a ko.computed? Would that mess up if we use infinity scrolling

        self.addEntry = function()
        {
            //TODO - client side validation before submitting

            var entry = {
              name : j$nameEntry.val(),
              comment : j$commentsEntry.val(),
              eventType : j$typeEntry.val(),
              eventDate : j$datepickerEntry.val()
            }

            j$.ajax('/users/<%= @user.id %>/events.json',
            {
                type: "post",
                contentType: "json",
                data: JSON.stringify({"event": entry}),
                success: function(result)
                {
                    console.log("Success");
                    console.log(result);

                    self.entries.unshift( new FeedEntry(result) );

                    j$("#new_modal").modal('hide');

                    resetForm();
                    clearErrors();
                },
                error: function(result)
                {
                    console.log("Failure");
                    console.log(result);

                    //TODO - display error messages
                    var errorArray = JSON.parse(result.responseText)["errors"];
                    var errorString = buildErrorMessage(errorArray);
                    j$('#new-error-messages').html(errorString);
                }
            });
        };

        self.initEdit = function(entry)
        {
            self.selectedItem(entry);

            j$idEntry.val(entry.id);
            j$datepickerEntry.val(entry.eventDate());
            j$typeEntry.val(entry.eventType());
            j$nameEntry.val(entry.name());
            j$commentsEntry.val(entry.comment());
        };

        self.submitUpdate = function()
        {
            if (j$idEntry.val() != "")
            {
                self.editEntry();
            }
            else
            {
                self.addEntry();
            }
        }

        self.editEntry = function()
        {
            var editId = j$idEntry.val();
            if (editId == "")
            {
                var errorArray = ["No event specified to edit"];
                var errorString = buildErrorMessage(errorArray);
                j$('#new-error-messages').html(errorString);
            }

            //TODO - client side validation before submitting

            var entry = {
              name : j$nameEntry.val(),
              comment : j$commentsEntry.val(),
              eventType : j$typeEntry.val(),
              eventDate : j$datepickerEntry.val()
            }

            j$.ajax('/users/<%= @user.id %>/events/' + editId + '.json',
            {
                type: "put",
                contentType: "json",
                data: JSON.stringify({"event": entry}),
                success: function(result)
                {
                    console.log("Success");
                    console.log(result);

                    //remove old value, add the updated value
                    self.entries.remove(function(event) { return event.id == editId });
                    self.entries.push(new FeedEntry(entry));

                    j$("#new_modal").modal('hide');

                    resetForm();
                    clearErrors();
                },
                error: function(result)
                {
                    console.log("Failure");
                    console.log(result);

                    var errorArray = JSON.parse(result.responseText)["errors"];
                    var errorString = buildErrorMessage(errorArray);
                    j$('#new-error-messages').html(errorString);
                }
            });
        };

        self.initDelete = function(entry)
        {
            self.entry_to_delete = entry;

            j$idDelete.val(entry.id);
            j$dateDelete.val(entry.eventDate());
            j$typeDelete.val(entry.eventType());
            j$nameDelete.val(entry.name());
            j$commentsDelete.val(entry.comment());
        };

        self.deleteEntry = function()
        {
            if (self.entry_to_delete == null)
            {
                var errorArray = ["No event specified to delete"];
                var errorString = buildErrorMessage(errorArray);
                j$('#delete-error-messages').html(errorString);
            }

            j$.ajax('/users/<%= @user.id %>/events/' + self.entry_to_delete.id + '.json',
            {
                type: "delete",
                contentType: "json",
                success: function(result)
                {
                    console.log("Success");
                    console.log(result);

                    //TODO - reset form
                    self.entries.remove( self.entry_to_delete );
                    //reset helper
                    self.entry_to_delete = null;

                    j$("#delete_modal").modal('hide');

                    clearErrors();
                },
                error: function(result)
                {
                    console.log("Failure");
                    console.log(result);

                    //TODO - display error messages
                    var errorArray = JSON.parse(result.responseText)["errors"];
                    var errorString = buildErrorMessage(errorArray);
                    j$('#delete-error-messages').html(errorString);            }
            });
        }

        //TODO - handle failure
        j$.ajax('/users/<%= @user.id %>/events.json',
        {
            type: "GET",
            contentType: "json",
            success: function(result)
            {
              var mappedEntries = j$.map(result, function(entry)
              {
                return new FeedEntry(entry);
              });
              self.entries(mappedEntries);
            },
            failure: function(result)
            {
                //TODO - do something
            }
        });

        j$.ajax('/users/<%= @user.id %>/eventTypes.json',
        {
          type: "GET",
          contentType: "json",
          success: function(result)
          {
              console.log("Retrieved event types.")
              console.log(result);

              //convert the response into an array
              var retrievedTypes = result.types;
              var typeArray = [];
              for (var i = 0; i < retrievedTypes.length; i++)
              {
                  typeArray[i] = retrievedTypes[i].eventType;
              }

              //TODO - need to keep this array up to date after new/edit/deletes?
              //init the typeahead
              j$typeEntry.typeahead(
              {
                source: typeArray
              });
          },
          failure: function(result)
          {
              //TODO - do something?
              console.log("Failed to retrieve event types.");
          }
        });
      }

      resetForm();

      var fevm = new FeedEntryViewModel();
      ko.applyBindings(fevm);
  });
</script>